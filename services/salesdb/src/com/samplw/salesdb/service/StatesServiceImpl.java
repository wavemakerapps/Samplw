/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.samplw.salesdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.samplw.salesdb.Customers;
import com.samplw.salesdb.States;


/**
 * ServiceImpl object for domain model class States.
 *
 * @see States
 */
@Service("salesdb.StatesService")
@Validated
public class StatesServiceImpl implements StatesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(StatesServiceImpl.class);

    @Lazy
    @Autowired
	@Qualifier("salesdb.CustomersService")
	private CustomersService customersService;

    @Autowired
    @Qualifier("salesdb.StatesDao")
    private WMGenericDao<States, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<States, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "salesdbTransactionManager")
    @Override
	public States create(States states) {
        LOGGER.debug("Creating a new States with information: {}", states);
        States statesCreated = this.wmGenericDao.create(states);
        if(statesCreated.getCustomerses() != null) {
            for(Customers customerse : statesCreated.getCustomerses()) {
                customerse.setStates(statesCreated);
                LOGGER.debug("Creating a new child Customers with information: {}", customerse);
                customersService.create(customerse);
            }
        }
        return statesCreated;
    }

	@Transactional(readOnly = true, value = "salesdbTransactionManager")
	@Override
	public States getById(Integer statesId) throws EntityNotFoundException {
        LOGGER.debug("Finding States by id: {}", statesId);
        States states = this.wmGenericDao.findById(statesId);
        if (states == null){
            LOGGER.debug("No States found with id: {}", statesId);
            throw new EntityNotFoundException(String.valueOf(statesId));
        }
        return states;
    }

    @Transactional(readOnly = true, value = "salesdbTransactionManager")
	@Override
	public States findById(Integer statesId) {
        LOGGER.debug("Finding States by id: {}", statesId);
        return this.wmGenericDao.findById(statesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "salesdbTransactionManager")
	@Override
	public States update(States states) throws EntityNotFoundException {
        LOGGER.debug("Updating States with information: {}", states);
        this.wmGenericDao.update(states);

        Integer statesId = states.getId();

        return this.wmGenericDao.findById(statesId);
    }

    @Transactional(value = "salesdbTransactionManager")
	@Override
	public States delete(Integer statesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting States with id: {}", statesId);
        States deleted = this.wmGenericDao.findById(statesId);
        if (deleted == null) {
            LOGGER.debug("No States found with id: {}", statesId);
            throw new EntityNotFoundException(String.valueOf(statesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "salesdbTransactionManager")
	@Override
	public Page<States> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all States");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "salesdbTransactionManager")
    @Override
    public Page<States> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all States");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "salesdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service salesdb for table States to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "salesdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "salesdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "salesdbTransactionManager")
    @Override
    public Page<Customers> findAssociatedCustomerses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated customerses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("states.id = '" + id + "'");

        return customersService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CustomersService instance
	 */
	protected void setCustomersService(CustomersService service) {
        this.customersService = service;
    }

}

