/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.samplw.salesdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.samplw.salesdb.Tasks;


/**
 * ServiceImpl object for domain model class Tasks.
 *
 * @see Tasks
 */
@Service("salesdb.TasksService")
@Validated
public class TasksServiceImpl implements TasksService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TasksServiceImpl.class);


    @Autowired
    @Qualifier("salesdb.TasksDao")
    private WMGenericDao<Tasks, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Tasks, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "salesdbTransactionManager")
    @Override
	public Tasks create(Tasks tasks) {
        LOGGER.debug("Creating a new Tasks with information: {}", tasks);
        Tasks tasksCreated = this.wmGenericDao.create(tasks);
        return tasksCreated;
    }

	@Transactional(readOnly = true, value = "salesdbTransactionManager")
	@Override
	public Tasks getById(Integer tasksId) throws EntityNotFoundException {
        LOGGER.debug("Finding Tasks by id: {}", tasksId);
        Tasks tasks = this.wmGenericDao.findById(tasksId);
        if (tasks == null){
            LOGGER.debug("No Tasks found with id: {}", tasksId);
            throw new EntityNotFoundException(String.valueOf(tasksId));
        }
        return tasks;
    }

    @Transactional(readOnly = true, value = "salesdbTransactionManager")
	@Override
	public Tasks findById(Integer tasksId) {
        LOGGER.debug("Finding Tasks by id: {}", tasksId);
        return this.wmGenericDao.findById(tasksId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "salesdbTransactionManager")
	@Override
	public Tasks update(Tasks tasks) throws EntityNotFoundException {
        LOGGER.debug("Updating Tasks with information: {}", tasks);
        this.wmGenericDao.update(tasks);

        Integer tasksId = tasks.getId();

        return this.wmGenericDao.findById(tasksId);
    }

    @Transactional(value = "salesdbTransactionManager")
	@Override
	public Tasks delete(Integer tasksId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Tasks with id: {}", tasksId);
        Tasks deleted = this.wmGenericDao.findById(tasksId);
        if (deleted == null) {
            LOGGER.debug("No Tasks found with id: {}", tasksId);
            throw new EntityNotFoundException(String.valueOf(tasksId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "salesdbTransactionManager")
	@Override
	public Page<Tasks> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Tasks");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "salesdbTransactionManager")
    @Override
    public Page<Tasks> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Tasks");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "salesdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service salesdb for table Tasks to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "salesdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "salesdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

